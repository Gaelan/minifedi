#!/usr/bin/env bash

# Derived from the update script for nixpkgs#mastodon. MIT-licensed.

set -e

NAME=$1
REPO=$2
REV=$3

if [[ -z "$REV" ]]; then
    echo "Usage: minifedi mk-mastodon NAME REPO REV"
    echo "NAME can be anything, but generally it's something like mastodon-4.1.4 or glitch-12abcdef" 
    echo "REPO is a git clone URL"
    echo "REV is a git commit or tag (not a branch)"
    exit 1
fi

rm -rf versions/mastodon/$NAME
mkdir -p versions/mastodon/$NAME
cd versions/mastodon/$NAME

TARGET_DIR="$PWD"

WORK_DIR=$(mktemp -d)

# Check that working directory was created.
if [[ -z "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
    echo "Could not create temporary directory"
    exit 1
fi

# Delete the working directory on exit.
function cleanup {
    rm -rf "$WORK_DIR"
}
trap cleanup EXIT

echo "Fetching source code"
JSON=$(nix-prefetch-git $REPO $REV)
SHA=$(echo "$JSON" | jq -r .sha256)

echo "Creating version.nix"
echo "\"$NAME\"" > name.nix

cat > source.nix << EOF
# This file was generated by minifedi mk-mastodon.
{ fetchgit, applyPatches }: fetchgit {
    url = "$REPO";
    rev = "$REV";
    sha256 = "$SHA";
}
EOF
SOURCE_DIR="$(nix-build --no-out-link -E '(import <nixpkgs> {}).callPackage ./source.nix {}')"

echo "Creating gemset.nix"
bundix --lockfile="$SOURCE_DIR/Gemfile.lock" --gemfile="$SOURCE_DIR/Gemfile"
echo "" >> "$TARGET_DIR/gemset.nix"  # Create trailing newline to please EditorConfig checks

echo "Creating yarn-hash.nix"
echo '"'$(prefetch-yarn-deps "$SOURCE_DIR/yarn.lock")'"' > "$TARGET_DIR/yarn-hash.nix"

git add .